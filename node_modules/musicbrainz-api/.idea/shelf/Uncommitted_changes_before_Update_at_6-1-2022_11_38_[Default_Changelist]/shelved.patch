Index: test/test-musicbrainz-api.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { IMusicBrainzConfig, LinkType, MusicBrainzApi } from '../src/musicbrainz-api';\r\nimport { assert } from 'chai';\r\nimport { XmlMetadata } from '../src/xml/xml-metadata';\r\nimport * as mb from '../src/musicbrainz.types';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nconst packageInfo = require('../package.json');\r\n\r\nconst appUrl = 'https://github.com/Borewit/musicbrainz-api';\r\n\r\nconst testBotAccount = {\r\n  username: process.env.MBUSER,\r\n  password: process.env.MBPWD\r\n};\r\n\r\nconst testApiConfig: IMusicBrainzConfig = {\r\n  botAccount: testBotAccount,\r\n  baseUrl: 'https://test.musicbrainz.org',\r\n\r\n  /**\r\n   * Enable proxy, like Fiddler\r\n   */\r\n  proxy: process.env.MBPROXY,\r\n\r\n  appName: packageInfo.name,\r\n  appVersion: packageInfo.version,\r\n  appContactInfo: appUrl\r\n};\r\n\r\nconst searchApiConfig: IMusicBrainzConfig = {\r\n\r\n  baseUrl: 'https://musicbrainz.org',\r\n\r\n  /**\r\n   * Enable proxy, like Fiddler\r\n   */\r\n  proxy: process.env.MBPROXY,\r\n\r\n  appName: packageInfo.name,\r\n  appVersion: packageInfo.version,\r\n  appContactInfo: appUrl\r\n};\r\n\r\nconst mbTestApi = new MusicBrainzApi(testApiConfig);\r\nconst mbApi = new MusicBrainzApi(searchApiConfig);\r\n\r\n// Hack shared rate-limiter\r\n(mbApi as any).rateLimiter = (mbTestApi as any).rateLimiter;\r\n\r\ndescribe('MusicBrainz-api', function() {\r\n\r\n  this.timeout(20000); // MusicBrainz has a rate limiter\r\n\r\n  const mbid = {\r\n    artist: {\r\n      Stromae: 'ab2528d9-719f-4261-8098-21849222a0f2'\r\n    },\r\n    recording: {\r\n      Formidable: '16afa384-174e-435e-bfa3-5591accda31c',\r\n      Montilla: '2faab3ff-1b3a-4378-bfa2-0513446644ed'\r\n    },\r\n    release: {\r\n      Formidable: '976e0677-a480-4a5e-a177-6a86c1900bbf',\r\n      Anomalie: '478aaba4-9425-4a67-8951-a77739462df4',\r\n      RacineCarree: [\r\n        '348662a8-54ce-4d14-adf5-3ce2cefd57bb',\r\n        'c22bdb3a-69c0-449a-9ef5-99796bb0f2d7',\r\n        'de57c1d9-5e65-420f-a896-1332e87d4c09'\r\n      ]\r\n    },\r\n    releaseGroup: {\r\n      Formidable: '19099ea5-3600-4154-b482-2ec68815883e',\r\n      RacineCarree: 'd079dc50-fa9b-4a88-90f4-5e8723accd75'\r\n    },\r\n    work: {\r\n      Formidable: 'b2aa02f4-6c95-43be-a426-aedb9f9a3805'\r\n    },\r\n    area: {\r\n      Belgium: '5b8a5ee5-0bb3-34cf-9a75-c27c44e341fc',\r\n      IleDeFrance: 'd79e4501-8cba-431b-96e7-bb9976f0ae76'\r\n    },\r\n    label: {\r\n      Mosaert: '0550200c-22c1-4c62-b761-ef0b3665262b'\r\n    }\r\n  };\r\n\r\n  const spotify = {\r\n    album: {\r\n      RacineCarree: {\r\n        id: '6uyslsVGFsHKzdGUosFwBM'\r\n      }\r\n    },\r\n    track: {\r\n      Formidable: {\r\n        id: '2AMysGXOe0zzZJMtH3Nizb'\r\n      }\r\n    }\r\n  };\r\n\r\n  it('Required environment variable', () => {\r\n    assert.isDefined(process.env.MBUSER, 'process.env.MBUSER');\r\n    assert.isDefined(process.env.MBPWD, 'process.env.MBPWD');\r\n  });\r\n\r\n  it('Extract CSRF', () => {\r\n    const html = fs.readFileSync(path.join(__dirname, 'csrf.html'), 'utf8');\r\n    const csrf = MusicBrainzApi.fetchCsrf(html);\r\n    assert.deepStrictEqual(csrf, {\r\n      sessionKey: 'csrf_token:x0VIlHob5nPcWKqJIwNPwE5Y3kE+nGQ9fccgTSYbuMU=',\r\n      token: '6G9f/xJ6Y4fLVvfYGHrzBUM34j6hy4CJrBi3VkVwO9I='\r\n    }, 'CSRF data');\r\n  });\r\n\r\n  describe('Read metadata', () => {\r\n\r\n    describe('Lookup', () => {\r\n\r\n      it('get area', async () => {\r\n        const area = await mbApi.getArea(mbid.area.Belgium);\r\n        assert.strictEqual(area.id, mbid.area.Belgium);\r\n        assert.strictEqual(area.name, 'Belgium');\r\n      });\r\n\r\n      it('get artist', async () => {\r\n        const artist = await mbApi.getArtist(mbid.artist.Stromae);\r\n        assert.strictEqual(artist.id, mbid.artist.Stromae);\r\n        assert.strictEqual(artist.name, 'Stromae');\r\n      });\r\n\r\n      describe('Release', () => {\r\n\r\n        it('get release Formidable', async () => {\r\n          const release = await mbApi.getRelease(mbid.release.Formidable);\r\n          assert.strictEqual(release.id, mbid.release.Formidable);\r\n          assert.strictEqual(release.title, 'Formidable');\r\n        });\r\n\r\n        it('check release Anomalie', async () => {\r\n          const release = await mbApi.getRelease(mbid.release.Anomalie);\r\n          assert.strictEqual(release.id, mbid.release.Anomalie);\r\n          assert.strictEqual(release.title, 'Anomalie');\r\n        });\r\n\r\n        [\r\n          {inc: 'artist-credits', key: 'artist-credit'},\r\n          {inc: 'artists', key: 'artist-credit'},\r\n          {inc: 'collections', key: 'collections'},\r\n          {inc: 'labels', key: 'release-events'},\r\n          {inc: 'media', key: 'media'},\r\n          // {inc: 'recordings', key: 'recordings'},\r\n          {inc: 'release-groups', key: 'release-group'}\r\n        ].forEach(inc => {\r\n\r\n          it(`get release, include: '${inc.inc}'`, async () => {\r\n            const release = await mbApi.getRelease(mbid.release.Formidable, [inc.inc as any]);\r\n            assert.strictEqual(release.id, mbid.release.Formidable);\r\n            assert.strictEqual(release.title, 'Formidable');\r\n            assert.isDefined(release[inc.key], `Should include '${inc.key}'`);\r\n          });\r\n        });\r\n\r\n      });\r\n\r\n      describe('Release-group', () => {\r\n\r\n        it('get release-group', async () => {\r\n          const releaseGroup = await mbApi.getReleaseGroup(mbid.releaseGroup.Formidable);\r\n          assert.strictEqual(releaseGroup.id, mbid.releaseGroup.Formidable);\r\n          assert.strictEqual(releaseGroup.title, 'Formidable');\r\n        });\r\n\r\n        [\r\n          {inc: 'artist-credits', key: 'artist-credit'}\r\n        ].forEach(inc => {\r\n\r\n          it(`get release-group, include: '${inc.inc}'`, async () => {\r\n            const group = await mbApi.getReleaseGroup(mbid.releaseGroup.Formidable, [inc.inc as any]);\r\n            assert.strictEqual(group.id, mbid.releaseGroup.Formidable);\r\n            assert.strictEqual(group.title, 'Formidable');\r\n            assert.isDefined(group[inc.key], `Should include '${inc.key}'`);\r\n          });\r\n        });\r\n\r\n      });\r\n\r\n      it('get work', async () => {\r\n        const work = await mbApi.getWork(mbid.work.Formidable);\r\n        assert.strictEqual(work.id, mbid.work.Formidable);\r\n        assert.strictEqual(work.title, 'Formidable');\r\n      });\r\n\r\n      it('get label', async () => {\r\n        const label = await mbApi.getLabel(mbid.label.Mosaert);\r\n        assert.strictEqual(label.id, mbid.label.Mosaert);\r\n        assert.strictEqual(label.name, 'Mosaert');\r\n      });\r\n\r\n      describe('Recording', () => {\r\n\r\n        it('get recording', async () => {\r\n          const recording = await mbApi.getRecording(mbid.recording.Formidable);\r\n          assert.strictEqual(recording.id, mbid.recording.Formidable);\r\n          assert.strictEqual(recording.title, 'Formidable');\r\n          assert.isUndefined(recording.isrcs);\r\n          assert.isUndefined(recording['artist-credit']);\r\n          assert.isUndefined(recording.releases);\r\n        });\r\n\r\n        [\r\n          {inc: 'isrcs', key: 'isrcs'},\r\n          {inc: 'artist-credits', key: 'artist-credit'},\r\n          {inc: 'artists', key: 'artist-credit'},\r\n          {inc: 'releases', key: 'releases'}\r\n        ].forEach(inc => {\r\n\r\n          it(`get recording, include: '${inc.inc}'`, async () => {\r\n            const recording = await mbApi.getRecording(mbid.recording.Formidable, [inc.inc as any]);\r\n            assert.strictEqual(recording.id, mbid.recording.Formidable);\r\n            assert.strictEqual(recording.title, 'Formidable');\r\n            assert.isDefined(recording[inc.key], `Should include '${inc.key}'`);\r\n          });\r\n        });\r\n\r\n        it('get extended recording', async () => {\r\n          const recording = await mbApi.getRecording(mbid.recording.Formidable, ['isrcs', 'artists', 'releases', 'url-rels']);\r\n          assert.strictEqual(recording.id, mbid.recording.Formidable);\r\n          assert.strictEqual(recording.title, 'Formidable');\r\n          assert.isDefined(recording.isrcs);\r\n          assert.isDefined(recording['artist-credit']);\r\n          // assert.isDefined(recording.releases);\r\n        });\r\n      });\r\n\r\n    });\r\n\r\n    describe('Query', () => {\r\n\r\n      it('query: Queen - We Will Rock You', async () => {\r\n        const query = 'query=\"We Will Rock You\" AND arid:0383dadf-2a4e-4d10-a46a-e9e041da8eb3';\r\n        const result = await mbApi.search<mb.IReleaseGroupList>('release-group', {query});\r\n        assert.isAtLeast(result.count, 1);\r\n      });\r\n\r\n    });\r\n\r\n    describe('Search', () => {\r\n\r\n      describe('generic search', () => {\r\n\r\n        it('find artist: Stromae', async () => {\r\n          const result = await mbApi.search('artist', 'Stromae');\r\n          assert.isAtLeast(result.count, 1);\r\n        });\r\n\r\n      });\r\n\r\n      describe('searchArtist', () => {\r\n\r\n        it('find artist: Stromae', async () => {\r\n          const result = await mbApi.searchArtist('Stromae');\r\n          assert.isAtLeast(result.count, 1);\r\n          assert.isAtLeast(result.artists.length, 1);\r\n          assert.strictEqual(result.artists[0].id, mbid.artist.Stromae);\r\n        });\r\n\r\n      });\r\n\r\n      describe('searchReleaseGroup', () => {\r\n\r\n        it('find release-group: Racine carrée', async () => {\r\n          const result = await mbApi.searchReleaseGroup('Racine carrée');\r\n          assert.isAtLeast(result.count, 1);\r\n          assert.isAtLeast(result['release-groups'].length, 1);\r\n          assert.strictEqual(result['release-groups'][0].id, mbid.releaseGroup.RacineCarree);\r\n        });\r\n\r\n        it('find release-group: Racine carrée, by artist and group name', async () => {\r\n          const result = await mbApi.searchReleaseGroup({release: 'Racine carrée', artist: 'Stromae'});\r\n          assert.isAtLeast(result.count, 1);\r\n          assert.isAtLeast(result['release-groups'].length, 1);\r\n          assert.strictEqual(result['release-groups'][0].id, mbid.releaseGroup.RacineCarree);\r\n        });\r\n      });\r\n\r\n      describe('searchRelease', () => {\r\n\r\n        it('find release-group: Racine carrée', async () => {\r\n          const result = await mbApi.searchRelease({release: 'Racine carrée'});\r\n          assert.isAtLeast(result.count, 2);\r\n          assert.isAtLeast(result.releases.length, 2);\r\n          assert.includeMembers(result.releases.map(release => release.id), mbid.release.RacineCarree);\r\n        });\r\n\r\n        it('find release by barcode', async () => {\r\n          const result = await mbApi.searchRelease({barcode: 602537479870});\r\n          assert.isAtLeast(result.count, 1);\r\n          assert.isAtLeast(result.releases.length, 1);\r\n          assert.equal(result.releases[0].id, mbid.release.RacineCarree[2]);\r\n        });\r\n\r\n      });\r\n\r\n      describe('searchArea', () => {\r\n\r\n        it('find area by name', async () => {\r\n          const result = await mbApi.searchArea('Île-de-France');\r\n          assert.isAtLeast(result.count, 1);\r\n          assert.isAtLeast(result.areas.length, 1);\r\n          assert.strictEqual(result.areas[0].id, mbid.area.IleDeFrance);\r\n        });\r\n      });\r\n\r\n      describe('searchUrl', () => {\r\n\r\n        const spotifyUrl = 'https://open.spotify.com/album/' + spotify.album.RacineCarree.id;\r\n\r\n        it('find url by url', async () => {\r\n          const result = await mbApi.searchUrl({url: spotifyUrl});\r\n          assert.isAtLeast(result.count, 1);\r\n          assert.isAtLeast(result.urls.length, 1);\r\n          assert.strictEqual(result.urls[0].resource, spotifyUrl);\r\n        });\r\n      });\r\n    });\r\n\r\n  });\r\n\r\n  describe('Submit API', () => {\r\n\r\n    it('Post ISRC Formidable', async () => {\r\n      const isrc_Formidable = 'BET671300161';\r\n      const xmlMetadata = new XmlMetadata();\r\n      const xmlRecording = xmlMetadata.pushRecording(mbid.recording.Formidable);\r\n      xmlRecording.isrcList.pushIsrc(isrc_Formidable);\r\n\r\n      await mbTestApi.post('recording', xmlMetadata);\r\n    });\r\n\r\n  });\r\n\r\n  /**\r\n   * https://wiki.musicbrainz.org/Development/Release_Editor_Seeding\r\n   */\r\n  describe.skip('User (bot) post form-data API', () => {\r\n\r\n    it('login & logout', async () => {\r\n      for (let n = 1; n <= 2; ++n) {\r\n        assert.isTrue(await mbTestApi.login(), `Login ${n}`);\r\n        assert.isTrue(await mbTestApi.logout(), `Logout ${n}`);\r\n      }\r\n    });\r\n\r\n    describe('Recording', () => {\r\n\r\n      it('add link', async () => {\r\n        const recording = await mbTestApi.getRecording(mbid.recording.Formidable);\r\n        assert.strictEqual(recording.id, mbid.recording.Formidable);\r\n        assert.strictEqual(recording.title, 'Formidable');\r\n\r\n        await mbTestApi.addUrlToRecording(recording, {\r\n          linkTypeId: LinkType.stream_for_free,\r\n          text: 'https://open.spotify.com/track/' + spotify.track.Formidable.id\r\n        });\r\n      });\r\n\r\n      it('add Spotify-ID', async () => {\r\n        const recording = await mbTestApi.getRecording(mbid.recording.Formidable);\r\n\r\n        const editNote = `Unit-test musicbrainz-api (${appUrl}), test augment recording with Spotify URL & ISRC`;\r\n        await mbTestApi.addSpotifyIdToRecording(recording, spotify.track.Formidable.id, editNote);\r\n      });\r\n\r\n      it('add Spotify-ID to recording with ISRC', async () => {\r\n        // https://test.musicbrainz.org/recording/a75b85bf-63dd-4fe1-8008-d15541b93bac\r\n        const recording_id = 'a75b85bf-63dd-4fe1-8008-d15541b93bac';\r\n\r\n        const recording = await mbTestApi.getRecording(recording_id);\r\n        const editNote = `Unit-test musicbrainz-api (${appUrl}), test augment recording with Spotify URL & ISRC`;\r\n        await mbTestApi.addSpotifyIdToRecording(recording, '3ZDO5YINwfoifRQ3ElshPM', editNote);\r\n      });\r\n\r\n    });\r\n\r\n    describe('ISRC', () => {\r\n\r\n      it('add ISRC', async () => {\r\n        const recording = await mbTestApi.getRecording(mbid.recording.Formidable, ['isrcs']);\r\n        assert.strictEqual(recording.id, mbid.recording.Formidable);\r\n        assert.strictEqual(recording.title, 'Formidable');\r\n\r\n        await mbTestApi.addIsrc(recording, 'BET671300161');\r\n      });\r\n\r\n    });\r\n\r\n    /**\r\n     * https://musicbrainz.org/doc/Development/XML_Web_Service/Version_2#ISRC_submission\r\n     */\r\n    describe('ISRC submission', () => {\r\n\r\n      it('add ISRC', async () => {\r\n        const xmlMedata = new XmlMetadata();\r\n        const xmlRec = xmlMedata.pushRecording('94fb868b-9233-4f9e-966b-e8036bf7461e');\r\n        xmlRec.isrcList.pushIsrc('GB5EM1801762');\r\n        await mbTestApi.post('recording', xmlMedata);\r\n      });\r\n\r\n    });\r\n\r\n  });\r\n\r\n});\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/test-musicbrainz-api.ts b/test/test-musicbrainz-api.ts
--- a/test/test-musicbrainz-api.ts	(revision 34904480bc8291aefe77a94593cf8a0ef1c85a91)
+++ b/test/test-musicbrainz-api.ts	(date 1641463729365)
@@ -4,6 +4,7 @@
 import * as mb from '../src/musicbrainz.types';
 import * as fs from 'fs';
 import * as path from 'path';
+import { IArtist } from '../lib/musicbrainz.types';
 
 const packageInfo = require('../package.json');
 
@@ -298,6 +299,20 @@
           assert.isAtLeast(result.releases.length, 1);
           assert.equal(result.releases[0].id, mbid.release.RacineCarree[2]);
         });
+
+        it('find release by barcode', async () => {
+          const result = await mbApi.searchRelease({barcode: 602537479870});
+          assert.isAtLeast(result.count, 1);
+          assert.isAtLeast(result.releases.length, 1);
+          assert.equal(result.releases[0].id, mbid.release.RacineCarree[2]);
+        });
+
+        it('find releases by artist', async () => {
+          const result = await mbApi.searchRelease({artist: 'eeb41a1e-4326-4d04-8c47-0f564ceecd68'});
+          assert.isAtLeast(result.count, 1);
+          assert.isAtLeast(result.releases.length, 1);
+          assert.equal(result.releases[0].id, mbid.release.RacineCarree[2]);
+        });
 
       });
 
@@ -410,4 +425,18 @@
 
   });
 
+  it('try something', async () => {
+    const artist_mbid = 'eeb41a1e-4326-4d04-8c47-0f564ceecd68';
+    const searchResult: IArtist = await mbApi.getArtist(artist_mbid, [
+      'artist-rels',
+      'releases',
+      'recordings',
+      'url-rels'
+    ]);
+
+    const result = await mbApi.searchRelease({artist: 'eeb41a1e-4326-4d04-8c47-0f564ceecd68'}, 25);
+
+    assert.isNotNull(result);
+  });
+
 });
